var documenterSearchIndex = {"docs":
[{"location":"#AWSBatch","page":"Home","title":"AWSBatch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Docs: stable) (Image: CI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"AWSBatch.jl provides a small set of methods for working with AWS Batch jobs from julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AWSBatch assumes that you already have an AWS account configured with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"An ECR repository and a docker image pushed to it [1].\nAn IAM role to apply to the batch jobs.\nA compute environment and job queue for submitting jobs to [2].","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please review the \"Getting Started with AWS Batch\" guide and example CloudFormation template for more details.","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using AWSBatch\n\njulia> job = run_batch(\n           name=\"Demo\",\n           definition=\"AWSBatchJobDefinition\",\n           queue=\"AWSBatchJobQueue\",\n           image = \"000000000000.dkr.ecr.us-east-1.amazonaws.com/demo:latest\",\n           role = \"arn:aws:iam::000000000000:role/AWSBatchJobRole\",\n           vcpus = 1,\n           memory = 1024,\n           cmd = `julia -e 'println(\"Hello World!\")'`,\n       )\nAWSBatch.BatchJob(\"00000000-0000-0000-0000-000000000000\")\n\njulia> wait(job, [AWSBatch.SUCCEEDED])\ntrue\n\njulia> results = log_events(job)\n1-element Array{AWSBatch.LogEvent,1}:\n AWSBatch.LogEvent(\"00000000000000000000000000000000000000000000000000000000\", 2018-04-23T19:41:18.765, 2018-04-23T19:41:18.677, \"Hello World!\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"AWSBatch also supports Memento logging for more detailed usage information.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"run_batch()","category":"page"},{"location":"#AWSBatch.run_batch-Tuple{}","page":"Home","title":"AWSBatch.run_batch","text":"run_batch(;\n    name::AbstractString=\"\",\n    queue::AbstractString=\"\",\n    region::AbstractString=\"\",\n    definition::Union{AbstractString, JobDefinition, Nothing}=nothing,\n    image::AbstractString=\"\",\n    vcpus::Integer=1,\n    memory::Integer=-1,\n    role::AbstractString=\"\",\n    cmd::Cmd=``,\n    num_jobs::Integer=1,\n    parameters::Dict{String, String}=Dict{String, String}(),\n) -> BatchJob\n\nHandles submitting a BatchJob based on various potential defaults. For example, default job fields can be inferred from an existing job definition or an existing job (if currently running in a batch job).\n\nOrder of priority from highest to lowest:\n\nExplict arguments passed in via kwargs.\nInferred environment (e.g., AWS_BATCH_JOB_ID environment variable set)\nJob definition parameters\n\nIf no valid job definition exists (see AWSBatch.job_definition_arn then a new job definition will be created and registered based on the job parameters.\n\n\n\n\n\n","category":"method"},{"location":"#BatchJob","page":"Home","title":"BatchJob","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AWSBatch.BatchJob\nAWSBatch.submit(::AbstractString, ::JobDefinition, ::AbstractString)\nAWSBatch.describe(::BatchJob)\nAWSBatch.JobDefinition(::BatchJob)\nAWSBatch.status(::BatchJob)\nBase.wait(::Function, ::BatchJob)\nBase.wait(::BatchJob, ::Vector{JobState}, ::Vector{JobState})\nAWSBatch.log_events(::BatchJob)","category":"page"},{"location":"#AWSBatch.BatchJob","page":"Home","title":"AWSBatch.BatchJob","text":"BatchJob\n\nStores a batch job id in order to:\n\ndescribe a job and its parameters\ncheck on the status of a job\nwait for a job to complete\nfetch log_events\n\nFields\n\nid::AbstractString: jobId\n\n\n\n\n\n","category":"type"},{"location":"#AWSBatch.submit-Tuple{AbstractString, JobDefinition, AbstractString}","page":"Home","title":"AWSBatch.submit","text":"submit(\n    name::AbstractString,\n    definition::JobDefinition,\n    queue::AbstractString;\n    container::AbstractDict=Dict(),\n    parameters::Dict{String,String}=Dict{String, String}(),\n    region::AbstractString=\"\",\n    num_jobs::Integer=1,\n) -> BatchJob\n\nHandles submitting the batch job. Returns a BatchJob wrapper for the id.\n\n\n\n\n\n","category":"method"},{"location":"#AWSBatch.describe-Tuple{BatchJob}","page":"Home","title":"AWSBatch.describe","text":"describe(job::BatchJob) -> Dict\n\nProvides details about the AWS batch job.\n\n\n\n\n\n","category":"method"},{"location":"#AWSBatch.JobDefinition-Tuple{BatchJob}","page":"Home","title":"AWSBatch.JobDefinition","text":"JobDefinition\n\nReturns the job definition corresponding to a batch job.\n\n\n\n\n\n","category":"method"},{"location":"#AWSBatch.status-Tuple{BatchJob}","page":"Home","title":"AWSBatch.status","text":"status(job::BatchJob) -> JobState\n\nReturns the current status of a job.\n\n\n\n\n\n","category":"method"},{"location":"#Base.wait-Tuple{Function, BatchJob}","page":"Home","title":"Base.wait","text":"wait(\n    cond::Function,\n    job::BatchJob;\n    timeout=600,\n    delay=5\n)\n\nPolls the batch job state until it hits one of the conditions in cond. The loop will exit if it hits a failure condition and will not catch any excpetions. The polling interval can be controlled with delay and timeout provides a maximum polling time.\n\nExamples\n\njulia> wait(state -> state < SUCCEEDED, job)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#Base.wait-Tuple{BatchJob, Vector{JobState}, Vector{JobState}}","page":"Home","title":"Base.wait","text":"wait(\n    job::BatchJob,\n    cond::Vector{JobState}=[RUNNING, SUCCEEDED],\n    failure::Vector{JobState}=[FAILED];\n    kwargs...,\n)\n\nPolls the batch job state until it hits one of the conditions in cond. The loop will exit if it hits a failure condition and will not catch any excpetions. The polling interval can be controlled with delay and timeout provides a maximum polling time.\n\n\n\n\n\n","category":"method"},{"location":"#AWSBatch.log_events-Tuple{BatchJob}","page":"Home","title":"AWSBatch.log_events","text":"log_events(job::BatchJob) -> Union{Vector{LogEvent}, Nothing}\n\nFetches the logStreamName, fetches the CloudWatch logs, and returns a vector of log events. If the log stream does not currently exist then nothing is returned.\n\nNOTES:\n\nThe logStreamName isn't available until the job is RUNNING, so you may want to use wait(job) or wait(job, [AWSBatch.SUCCEEDED]) prior to calling this function.\n\n\n\n\n\n","category":"method"},{"location":"#JobDefinition","page":"Home","title":"JobDefinition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AWSBatch.JobDefinition\nAWSBatch.job_definition_arn(::AbstractString)\nAWSBatch.register(::AbstractString)\nAWSBatch.deregister(::JobDefinition)\nAWSBatch.isregistered(::JobDefinition)\nAWSBatch.describe(::JobDefinition)","category":"page"},{"location":"#AWSBatch.JobDefinition","page":"Home","title":"AWSBatch.JobDefinition","text":"JobDefinition\n\nStores the job definition arn including the revision.\n\n\n\n\n\n","category":"type"},{"location":"#AWSBatch.job_definition_arn-Tuple{AbstractString}","page":"Home","title":"AWSBatch.job_definition_arn","text":"job_definition_arn(\n    definition_name::AbstractString;\n    image::AbstractString=\"\",\n    role::AbstractString=\"\"\n) -> Union{AbstractString, Nothing}\n\nLooks up the ARN (Amazon Resource Name) for the latest job definition that can be reused. Returns a JobDefinition with the ARN that can be reused or nothing.\n\nA job definition can only be reused if:\n\nstatus = ACTIVE\ntype = container\nimage = the current job's image\njobRoleArn = the current job's role\n\n\n\n\n\n","category":"method"},{"location":"#AWSBatch.register-Tuple{AbstractString}","page":"Home","title":"AWSBatch.register","text":"register(\n    definition_name::AbstractString;\n    role::AbstractString=\"\",\n    image::AbstractString=\"\",\n    vcpus::Integer=1,\n    memory::Integer=1024,\n    cmd::Cmd=``,\n    region::AbstractString=\"\",\n    parameters::Dict{String,String}=Dict{String, String}(),\n) -> JobDefinition\n\nRegisters a new job definition.\n\n\n\n\n\n","category":"method"},{"location":"#AWSBatch.deregister-Tuple{JobDefinition}","page":"Home","title":"AWSBatch.deregister","text":"deregister(job::JobDefinition)\n\nDeregisters an AWS Batch job.\n\n\n\n\n\n","category":"method"},{"location":"#AWSBatch.isregistered-Tuple{JobDefinition}","page":"Home","title":"AWSBatch.isregistered","text":"isregistered(definition::JobDefinition) -> Bool\n\nChecks if a JobDefinition is registered.\n\n\n\n\n\n","category":"method"},{"location":"#AWSBatch.describe-Tuple{JobDefinition}","page":"Home","title":"AWSBatch.describe","text":"describe(definition::JobDefinition) -> Dict\n\nDescribes a job definition as a dictionary. Requires the IAM permissions \"batch:DescribeJobDefinitions\".\n\n\n\n\n\n","category":"method"},{"location":"#JobState","page":"Home","title":"JobState","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AWSBatch.JobState","category":"page"},{"location":"#AWSBatch.JobState","page":"Home","title":"AWSBatch.JobState","text":"JobState\n\nAn enum for representing different possible AWS Batch job states.\n\nSee docs for details.\n\n\n\n\n\n","category":"type"},{"location":"#LogEvent","page":"Home","title":"LogEvent","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AWSBatch.LogEvent","category":"page"},{"location":"#AWSBatch.LogEvent","page":"Home","title":"AWSBatch.LogEvent","text":"LogEvent\n\nA struct for representing an event in an AWS Batch job log.\n\n\n\n\n\n","category":"type"}]
}
